/*## **문제**

말썽꾸러기 김코딩은 오늘도 장난을 치다가 조별 발표 순서가 담긴 통을 쏟고 말았습니다.

선생님께서는 미리 모든 발표 순서의 경우의 수를 저장해 놓았지만 김코딩의 버릇을 고치기 위해 문제를 내겠다고 말씀하셨습니다.

김코딩은 모든 조별 발표 순서에 대한 경우의 수를 차례대로 구한 뒤 발표 순서를 말하면 이 발표 순서가 몇 번째 경우의 수인지를 대답해야 합니다.

총 조의 수 N과 선생님이 말씀하시는 발표 순서 k가 주어질 때, 김코딩이 정답을 말 할 수 있게 올바른 리턴 값을 구하세요.

모든 경우의 수가 담긴 배열은 번호가 작을수록 앞에 위치한다고 가정합니다.
ex) N = 3일경우, [[1,2,3],[1,3,2],[2,1,3],[2,3,1],[3,1,2],[3,2,1]]

## **입력**

### **인자 1: N**

- `Number` 타입의 1 <= N <= 12인 조의 개수

### **인자 2: K**

- `Number`타입의 Array (0 <= index)

ex) n이 3이고 k가 [2, 3, 1]일 경우

모든 경우의 수를 2차원 배열에 담는다면 [[1,2,3],[1,3,2],[2,1,3],[2,3,1],[3,1,2],[3,2,1]]이 되고,

반환하는 값은 3이 됩니다.

## **주의사항**

- k내에 중복되는 요소는 없다고 가정합니다.

## **입출력 예시**

```
let output = orderOfPresentation(3, [2, 3, 1]);
console.log(output); // 3

output = orderOfPresentation(5, [1, 3, 2, 4, 5])
console.log(output); // 6
```

---

## 수도코드

1. 모든 경우의 수 → N !
2. k 배열을 반복문 이용 → 각 숫자에 접근
3. i 번째 숫자(와 그앞의 숫자들) 를 고정 했을 때 경우의수 → (N-1-i) !
4. k내에 중복되는 요소는 없다 → 숫자 더미 배열 사용 → 3번에서의 경우의수가 몇개일지 계산

## 풀이

순서의 경우의 수 >> 순열  // N !

각 경우는 오름차순으로 정렬 >> 앞에서 부터 숫자를 기준으로 할때 그보다 작은숫자가 그자리에 위치한 경우의 수보다 크다

n=3, k=[2,3,1] 에서 2를 기준으로 할때 그보다 작은숫자는 1 이므로 1이 2의 자리에 위치할 때의 경우의 수 2 ( [1,2,3], [1,3,2]) 보다 크거나 같다 ('같다' 가 있는 이유는 구하고자 하는 값은 '몇번째'가 아니라 2차원 배열의 인덱스 이므로 )

2를 고정한 후 3을 기준으로 하면 그보다 작은 숫자는 1 이므로 1이 3의 자리에 위치할 때의 경우의 수 1 ([2,1,3]) 과 그전까지 경우의 수 2 의 합 3 보다 크거나 같다

이미 사용한 숫자는 제외 >> isUsed 사용

*/
function orderOfPresentation(N, K) {
  const factorial = (n) => {
    if (n <= 1) return 1;
    return n * factorial(n - 1);
  };
  const isUsed = Array(N + 1).fill(false);
  let result = 0;
  for (let i = 0; i < K.length; i++) {
    const num = K[i];
    isUsed[num] = true;
    const validCnt = isUsed.slice(1, num).filter((el) => el === false).length;
    const formerCnt = validCnt * factorial(N - i - 1);
    result += formerCnt;
  }
  return result;
}

/*
## Note
isUsed 의 길이가 N+1 인 이유는, 조는 1조 부터 시작하기 때문 ( = K 의 인자는 1 이상이기 때문)

isUsed[num] = K[i] 와 인덱스를 맞추기 위해서 이다. // 따라서, isUsed[0] 은 더미 데이터 이다.


## 순열 과 조합

순열

뽑아서 정렬을 하는 경우

같은 구성 인자라도 순서가 다르면 인정 O

nPr = n! / (n-r)!

ex) 1부터 5 중에 3개의 숫자를 뽑아서 정렬하는 경우 : 5*4*3 = 60

조합 

뽑는 경우

같은 구성 인자라도 순서가 다르면 인정 X

nCr = n! / r!(n-r)! = nPr / r!

ex) 1부터 5중에 3개의 숫자를 뽑는 경우 : 5*4*3/(3*2) = 10
*/
